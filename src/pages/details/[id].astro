---
import Layout from "../../layouts/Layout.astro";
import HeaderSection from "../../components/HeaderSection.astro";
import SectionParking from "../../components/SectionParking.astro";
import near_places from "../../mocks/near_places.json";
import CircularPercentage from "../../components/CircularPercentage.astro";
import { date } from "astro:schema";

export async function getStaticPaths() {
  const all = await fetch("http://localhost:5001/Parkings/all");
  const places = await all.json();

  return places.map((parking: any) => ({
    params: { id: String(parking.id) }, // ¡Importante convertir a string!
  }));
}

const { id } = Astro.params;

const res = await fetch(`http://localhost:5001/Parkings/${id}`);
const place = await res.json();

if (!place) {
  throw new Error("Place not found");
}
---

<Layout>
  <main
    class="p-4 w-full h-full gap-4 max-h-screen flex flex-1 flex-col mb-12 overflow-y-auto"
  >
    <section>
      <HeaderSection title={place?.name || "Lugar no encontrado"} />
      <div class="flex flex-row justify-around items-center p-4 gap-3 w-full">
        <CircularPercentage
          availableSpots={place.availableSpots}
          totalSpots={place.totalSpots}
        />
        <div class="flex flex-col items-start flex-1">
          <p class="text-md">{place?.availableSpots}/{place?.totalSpots}</p>
          <p class="text-sm text-gray-500">
            Última actualización: Mier 12/03/2025 10:30 AM
          </p>
          <p class="text:md">{place?.address || "null"}</p>
          <!-- <a
            href=`${place.link_maps}`
            class="bg-indigo-600 rounded-md px-3 px- text-white font-bold transform motion-safe:hover:scale-110 duration-500"
            >View on maps</a
          > -->
        </div>
        <a href=`/history/${id}`>
          <span
            class="material-symbols-outlined hover:text-indigo-700 rounded-2xl hover:p-2 text-center cursor-pointer hover:scale-130 transition-transform duration-200 hover:bg-white"
            >history</span
          >
        </a>
      </div>
      <div class="flex flex-col md:flex-row gap-4 w-full">
        <section class="md:basis-2/3">
          <div>
            <HeaderSection title="Área" />
            <div class="relative w-full h-48" id="map">
              Aquí irá el croquis
              <div class="absolute"></div>
            </div>
          </div>
        </section>
        <section class="md:basis-1/3 h-full flex flex-col gap-3">
          Zonas
          {
            place.rows.map((row: any) => (
              <div class="bg-indigo-600 rounded-md shadow-lg flex flex-col gap-2 hover:bg-indigo-800">
                <header class="text-center text-white font-semibold mt-3">
                  {row.code}
                </header>
                <div class="grid grid-cols-5 gap-2 p-3">
                  {row.spots.map((spot: any) => (
                    <div class="flex flex-col items-center">
                      <div
                        class={`h-15 aspect-square flex flex-row items-center justify-center rounded hover:scale-120 hover:font-bold transform duration-500 ${
                          spot.status == "Available"
                            ? "bg-green-500 hover:bg-green-400"
                            : spot.status == "Reserved"
                              ? "bg-red-500 hover:bg-red-400"
                              : "bg-yellow-500 hover:bg-yellow-400"
                        }`}
                      >
                        {spot.code}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ))
          }
        </section>
      </div>
    </section>

    <style>
      .progress-circle {
        height: 85px;
        position: relative;
        aspect-ratio: 1;
        max-height: 100px;
      }

      .circular-chart {
        width: 100%;
        height: 100%;
        transform: rotate(-90deg); /* Para que comience en la parte superior */
      }

      .circle-bg {
        fill: none;
        stroke: #dcdcdc; /* Color del fondo */
        stroke-width: 3.8;
      }

      .circle {
        fill: none;
        stroke: oklch(0.457 0.24 277.023); /* Color del progreso */
        stroke-width: 3.8;
        stroke-linecap: round; /* Extremos redondeados */
        transition: stroke-dasharray 0.3s ease;
      }

      .percentage {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 1.15rem;
        font-weight: bold;
        color: oklch(0.457 0.24 277.023);
      }
    </style>

    <script>
      // const placed = JSON.parse(
      //   document.getElementById("zones-parking").dataset.zones,
      // );
      // const map = document.getElementById("map");
      // placed.parking_zones.map((zone) => {
      //   const element = document.createElement("div");
      //   element.innerHTML = zone.name;
      //   element.id = `zone-${zone.name}`;
      //   element.classList.add("bg-indigo-500", "bg-opacity-0");
      //   map.appendChild(element);
      // });
      // for (let child of map.children) {
      //   (child as HTMLElement).hidden = true;
      // }
    </script>
  </main>
</Layout>
